Cristals vs trucks
Intro

    Réalisation d'un projet
    Par groupe de 2 (un groupe de 3) : pas les mêmes groupes que précédemment
    Réalisation d'une intelligence artificielle
        En utilisant un RTOS
    Pour un jeu que j'ai créé
    À l'aide de camions, vous devez ramasser au plus vite des cristaux
        Plus vite que les autres groupes dans les mêmes conditions
    https://github.com/vpoulailleau/crystal_trucks

Étapes

    Se baser sur le projet fourni (FreeRTOS.X.zip dans le dossier arinfo)
    Sur carte Basys MX3
    Avec l'OS FreeRTOS (v9) : je vous laisse vous documenter à ce sujet (vous pouvez regarder le main.c)
    Avec des bouts de code pour manipuler certains périphériques dont l'UART
    Collaborez avec GitHub (dépôt public ou privé où vous me donnez accès)

Étape 1

    Testez l'UART avec un affichage sur votre PC de ce qu'envoie la carte

Étape 2

    Ajoutez, dans le projet, l'initialisation du jeu fournie dans game.c (TODO à adapter avec l'UART)

    void init_game(unsigned int seed, uint8_t *nb_trucks, uint8_t *width, uint8_t *height, uint8_t *cristals);
        seed : numéro de la configuration, 4 par exemple
        nb_trucks : adresse d'un entier, sera modifié, nombre de camions
        width : adresse d'un entier, sera modifié, largeur de la grille
        height : adresse d'un entier, sera modifié, hauteur de la grille
        cristals : adresse d'un tableau entier, sera modifié, contenu de la grille
            Les width×height premières cellules sont modifiées
            Contenu de la première ligne de la grille, puis de la seconde…
            Chaque cellule donne le nombre de cristaux présents à l'origine

Étape 3

    Créez une tâche/thread pour un camion
    Pilotez le camion pour ramasser tous les cristaux
        Aller en boucle sur la première case avec un cristal
        Avec les commandes expliquées sur le README du GitHub

Étape 4

    Utilisez le viewer du GitHub pour visualiser le résultat

Étape 5

    Optimisez l'algorithme du camion
        Allez en boucle sur la case la plus proche avec un cristal

Étape 6

    Faites une tâche, et lancez un thread par camion
    Centralisez le contenu de la grille
    Attention, c'est une ressource partagée, il faut la protéger (tout comme l'UART)

Étape 7

    Le contenu de la grille n'est plus centralisé, chaque camion est autonome et a son contenu de grille
    Les camions vont devoir communiquer ensemble

Étape 8

    Optimisez votre algorithme de ramassage pour être plus rapide que les autres groupes